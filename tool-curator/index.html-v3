<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tool Curator — Dark</title>
  <style>
    :root{
      /* Monochrome dark theme */
      --bg: #0b0f14;          /* app background */
      --panel: #11161b;       /* cards/panels */
      --ink: #e5e7eb;         /* primary text */
      --muted: #94a3b8;       /* secondary text */
      --line: #222a33;        /* borders/dividers */
      --field: #0f1419;       /* input background */
      --field-line:#2a3440;   /* input border */
      --accent:#cbd5e1;       /* minimal, still neutral */
      --danger:#ef4444;
      --radius:10px;
    }

    *{box-sizing:border-box;margin:0;padding:0}
    body{
      font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Inter,system-ui,sans-serif;
      background:var(--bg);
      color:var(--ink);
      min-height:100vh;
      padding:20px;
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
    }
    .container{max-width:1100px;margin:0 auto}

    /* Header */
    .header{ text-align:center; margin-bottom:16px; }
    .header h1{ font-size:1.6rem; font-weight:800; letter-spacing:-0.01em; }
    .header p{ color:var(--muted); margin-top:6px; font-size:.95rem; }

    /* Panel */
    .controls{
      background:var(--panel);
      border:1px solid var(--line);
      border-radius:var(--radius);
      padding:14px;
      margin-bottom:16px;
    }
    .controls h2{ font-size:.95rem; font-weight:700; margin-bottom:10px; }

    /* Form */
    .form-row{
      display:grid;
      grid-template-columns: 2fr 2fr 1fr 120px;
      gap:8px;
      margin-bottom:8px;
      align-items:end;
    }
    input, select{
      padding:10px 11px;
      border:1px solid var(--field-line);
      background:var(--field);
      color:var(--ink);
      border-radius:8px;
      font-size:13px;
      outline:none;
    }
    input::placeholder{ color:#6b7280; }
    input:focus, select:focus{ border-color:var(--accent); }

    /* Buttons (flat, minimal) */
    .btn{
      padding:10px 12px;
      border-radius:8px;
      font-size:13px;
      font-weight:600;
      cursor:pointer;
      border:1px solid var(--line);
      background:#0f1419;
      color:var(--ink);
    }
    .btn:hover{ background:#121821; }
    .btn-primary{
      background:#1a2330;
      border-color:#2a3440;
    }
    .btn-primary:hover{ background:#1f2a38; }
    .btn-danger{
      background:#2a1214;
      border-color:#3a1a1d;
      color:#ffd7db;
    }
    .btn-danger:hover{ background:#3a171a; }
    .btn-small{ padding:6px 8px; font-size:11px; border-radius:6px; }

    /* Search & Filter */
    .search-filter{
      display:grid;
      grid-template-columns:1fr auto;
      gap:8px;
      margin-top:8px;
    }

    /* Categories & items */
    .categories{
      display:grid;
      grid-template-columns: repeat(auto-fit,minmax(360px,1fr));
      gap:12px;
    }
    .category{
      background:var(--panel);
      border:1px solid var(--line);
      border-radius:var(--radius);
      padding:14px;
    }
    .category h3{
      font-size:1rem;
      margin-bottom:10px;
      display:flex; align-items:center; gap:8px;
    }
    .count{ margin-left:auto; color:var(--muted); font-size:.85rem; }

    .bookmarks{ display:grid; gap:8px; }
    .bookmark{
      background:#0e1318;
      border:1px solid var(--line);
      border-radius:8px;
      padding:10px;
    }
    .bookmark-header{
      display:flex; justify-content:space-between; align-items:flex-start; gap:8px;
      margin-bottom:6px;
    }
    .bookmark-title{
      color:var(--ink);
      text-decoration:none;
      font-weight:650;
      font-size:.98rem;
    }
    .bookmark-title:hover{ text-decoration:underline; }
    .bookmark-description{ color:var(--muted); font-size:.9rem; margin-bottom:6px; }
    .bookmark-url{ color:#9aa7b6; font-size:.82rem; word-break:break-all; }

    .import-export{
      display:flex; gap:8px; align-items:center;
      margin-top:10px; padding-top:10px; border-top:1px solid var(--line);
    }

    .empty{
      text-align:center; color:var(--muted); font-size:1rem; padding:32px;
      border:1px dashed var(--line); border-radius:12px; background:#0e1318;
    }

    @media (max-width: 900px){
      .form-row{ grid-template-columns:1fr; }
      .search-filter{ grid-template-columns:1fr; }
      .categories{ grid-template-columns:1fr; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>🔖 Tool Curator</h1>
      <p>Minimal, focused list of your favorite tools</p>
    </div>

    <div class="controls">
      <h2>Add New Tool</h2>
      <!-- kept intact -->
      <div class="form-row">
        <input type="text" id="nameInput" placeholder="Tool Name" required>
        <input type="url" id="urlInput" placeholder="https://example.com" required>
        <select id="categoryInput">
          <option value="Development">Development</option>
          <option value="Design">Design</option>
          <option value="Content">Content</option>
          <option value="Analytics">Analytics</option>
          <option value="Productivity">Productivity</option>
          <option value="Testing">Testing</option>
          <option value="Other">Other</option>
        </select>
        <button class="btn btn-primary" onclick="addBookmark()">Add Tool</button>
      </div>

      <div class="form-row">
        <input type="text" id="descriptionInput" placeholder="Brief description (optional)" style="grid-column:1 / -1;">
      </div>

      <div class="search-filter">
        <input type="text" id="searchInput" placeholder="Search…" onkeyup="filterBookmarks()">
        <select id="categoryFilter" onchange="filterBookmarks()">
          <option value="">All Categories</option>
        </select>
      </div>

      <div class="import-export">
        <button class="btn" onclick="exportData()">Export</button>
        <input type="file" id="fileInput" accept=".json" onchange="importData(event)">
        <button class="btn" onclick="document.getElementById('fileInput').click()">Import</button>
        <button class="btn" onclick="clearAllData()">Clear All</button>
      </div>
    </div>

    <div class="categories" id="categoriesContainer"></div>
  </div>

  <script>
    let bookmarks = [];

    // Minimal icon set—kept subtle via text
    const categoryIcons = {
      'Development':'🧰', 'Design':'🎨', 'Content':'📝', 'Analytics':'📊',
      'Productivity':'⚙️', 'Testing':'🧪', 'Other':'📂', 'Cloud':'☁️', '3rd Party API':'🧩'
    };

    window.onload = function(){
      loadSampleData();
      renderBookmarks();
      updateCategoryFilter();
    };

    function loadSampleData(){
      const sample = [
        { id: Date.now()+1, name:'GitHub', url:'https://github.com', category:'Development', description:'Version control & collaboration'},
        { id: Date.now()+2, name:'Figma', url:'https://figma.com', category:'Design', description:'Collaborative design tool'},
        { id: Date.now()+3, name:'Notion', url:'https://notion.so', category:'Productivity', description:'All-in-one workspace'},
        { id: Date.now()+4, name:'Google Analytics', url:'https://analytics.google.com', category:'Analytics', description:'Web analytics'},
        { id: Date.now()+5, name:'DigitalOcean', url:'https://www.digitalocean.com/', category:'Cloud', description:'Cloud'},
        { id: Date.now()+6, name:'FinancialModelingPrep', url:'https://site.financialmodelingprep.com/', category:'3rd Party API', description:'Stock data API'},
        { id: Date.now()+7, name:'Cloudflare', url:'https://dash.cloudflare.com/', category:'Cloud', description:'Cloud security'}
      ];
      if (bookmarks.length===0) bookmarks = sample;
    }

    function addBookmark(){
      const name = document.getElementById('nameInput').value.trim();
      const url = document.getElementById('urlInput').value.trim();
      const category = document.getElementById('categoryInput').value;
      const description = document.getElementById('descriptionInput').value.trim();

      if(!name || !url){ alert('Please fill in both name and URL.'); return; }
      try{ new URL(url); }catch{ alert('Please enter a valid URL with https://'); return; }

      bookmarks.push({ id: Date.now(), name, url, category, description });
      document.getElementById('nameInput').value='';
      document.getElementById('urlInput').value='';
      document.getElementById('descriptionInput').value='';

      renderBookmarks();
      updateCategoryFilter();
    }

    function removeBookmark(id){
      if(confirm('Remove this tool?')){
        bookmarks = bookmarks.filter(b=>b.id!==id);
        renderBookmarks();
        updateCategoryFilter();
      }
    }

    function renderBookmarks(){
      const container = document.getElementById('categoriesContainer');
      const q = (document.getElementById('searchInput').value||'').toLowerCase();
      const cat = document.getElementById('categoryFilter').value;

      const filtered = bookmarks.filter(b=>{
        const matchesSearch =
          b.name.toLowerCase().includes(q) ||
          (b.description||'').toLowerCase().includes(q) ||
          b.url.toLowerCase().includes(q);
        const matchesCat = !cat || b.category===cat;
        return matchesSearch && matchesCat;
      });

      const groups = {};
      filtered.forEach(b => { (groups[b.category] ??= []).push(b); });

      container.innerHTML = '';
      Object.keys(groups).sort().forEach(c=>{
        const wrap = document.createElement('div');
        wrap.className = 'category';
        const icon = categoryIcons[c] || '📂';
        wrap.innerHTML = `
          <h3>${icon} ${c} <span class="count">${groups[c].length}</span></h3>
          <div class="bookmarks">
            ${groups[c].map(b=>`
              <div class="bookmark">
                <div class="bookmark-header">
                  <a class="bookmark-title" href="${b.url}" target="_blank" rel="noopener noreferrer">${b.name}</a>
                  <button class="btn btn-danger btn-small" onclick="removeBookmark(${b.id})">Remove</button>
                </div>
                ${b.description ? `<div class="bookmark-description">${b.description}</div>`:''}
                <div class="bookmark-url">${b.url}</div>
              </div>
            `).join('')}
          </div>`;
        container.appendChild(wrap);
      });

      if(Object.keys(groups).length===0){
        container.innerHTML = `<div class="empty">No tools found. Try a different search or add some tools.</div>`;
      }
    }

    function updateCategoryFilter(){
      const sel = document.getElementById('categoryFilter');
      const current = sel.value;
      const cats = [...new Set(bookmarks.map(b=>b.category))].sort();

      sel.innerHTML = '<option value="">All Categories</option>';
      cats.forEach(c=>{
        const opt = document.createElement('option');
        opt.value = c;
        opt.textContent = c;
        sel.appendChild(opt);
      });
      sel.value = current;
    }

    function filterBookmarks(){ renderBookmarks(); }

    function exportData(){
      const data = JSON.stringify(bookmarks, null, 2);
      const blob = new Blob([data], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url; a.download = 'developer-tools-backup.json'; a.click();
      URL.revokeObjectURL(url);
    }

    function importData(e){
      const file = e.target.files[0];
      if(!file) return;
      const reader = new FileReader();
      reader.onload = (evt)=>{
        try{
          const imported = JSON.parse(evt.target.result);
          if(Array.isArray(imported)){
            if(confirm(`Replace your current ${bookmarks.length} tools with ${imported.length}?`)){
              bookmarks = imported.map((b,i)=>({ ...b, id: b.id || (Date.now()+i)}));
              renderBookmarks();
              updateCategoryFilter();
              alert('Imported!');
            }
          }else{
            alert('Invalid file format.');
          }
        }catch{
          alert('Could not parse JSON.');
        }
      };
      reader.readAsText(file);
      e.target.value = '';
    }

    function clearAllData(){
      if(confirm('Delete all tools? This cannot be undone.')){
        bookmarks = [];
        renderBookmarks();
        updateCategoryFilter();
      }
    }

    // Enter-to-add
    document.addEventListener('DOMContentLoaded', ()=>{
      ['nameInput','urlInput','descriptionInput'].forEach(id=>{
        const el = document.getElementById(id);
        el && el.addEventListener('keypress', e=>{
          if(e.key==='Enter') addBookmark();
        });
      });
    });
  </script>
</body>
</html>
